/*
 * This file is generated by jOOQ.
 */
package com.example.peachapi.driver.peachdb.gen.tables;


import com.example.peachapi.driver.peachdb.gen.Keys;
import com.example.peachapi.driver.peachdb.gen.Public;
import com.example.peachapi.driver.peachdb.gen.tables.records.AssignStatusRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssignStatus extends TableImpl<AssignStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.assign_status</code>
     */
    public static final AssignStatus ASSIGN_STATUS = new AssignStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssignStatusRecord> getRecordType() {
        return AssignStatusRecord.class;
    }

    /**
     * The column <code>public.assign_status.item_id</code>.
     */
    public final TableField<AssignStatusRecord, UUID> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.assign_status.status_id</code>.
     */
    public final TableField<AssignStatusRecord, UUID> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.assign_status.assigned_by</code>.
     */
    public final TableField<AssignStatusRecord, String> ASSIGNED_BY = createField(DSL.name("assigned_by"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.assign_status.assigned_at</code>.
     */
    public final TableField<AssignStatusRecord, LocalDateTime> ASSIGNED_AT = createField(DSL.name("assigned_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AssignStatus(Name alias, Table<AssignStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssignStatus(Name alias, Table<AssignStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.assign_status</code> table reference
     */
    public AssignStatus(String alias) {
        this(DSL.name(alias), ASSIGN_STATUS);
    }

    /**
     * Create an aliased <code>public.assign_status</code> table reference
     */
    public AssignStatus(Name alias) {
        this(alias, ASSIGN_STATUS);
    }

    /**
     * Create a <code>public.assign_status</code> table reference
     */
    public AssignStatus() {
        this(DSL.name("assign_status"), null);
    }

    public <O extends Record> AssignStatus(Table<O> child, ForeignKey<O, AssignStatusRecord> key) {
        super(child, key, ASSIGN_STATUS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AssignStatusRecord> getPrimaryKey() {
        return Keys.ASSIGN_STATUS_PKEY;
    }

    @Override
    public List<UniqueKey<AssignStatusRecord>> getKeys() {
        return Arrays.<UniqueKey<AssignStatusRecord>>asList(Keys.ASSIGN_STATUS_PKEY);
    }

    @Override
    public List<ForeignKey<AssignStatusRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AssignStatusRecord, ?>>asList(Keys.ASSIGN_STATUS__ASSIGN_STATUS_ITEM_ID_FKEY, Keys.ASSIGN_STATUS__ASSIGN_STATUS_STATUS_ID_FKEY);
    }

    public Items items() {
        return new Items(this, Keys.ASSIGN_STATUS__ASSIGN_STATUS_ITEM_ID_FKEY);
    }

    public Statues statues() {
        return new Statues(this, Keys.ASSIGN_STATUS__ASSIGN_STATUS_STATUS_ID_FKEY);
    }

    @Override
    public AssignStatus as(String alias) {
        return new AssignStatus(DSL.name(alias), this);
    }

    @Override
    public AssignStatus as(Name alias) {
        return new AssignStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssignStatus rename(String name) {
        return new AssignStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssignStatus rename(Name name) {
        return new AssignStatus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
