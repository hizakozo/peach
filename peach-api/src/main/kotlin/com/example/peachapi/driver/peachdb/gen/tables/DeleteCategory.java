/*
 * This file is generated by jOOQ.
 */
package com.example.peachapi.driver.peachdb.gen.tables;


import com.example.peachapi.driver.peachdb.gen.Keys;
import com.example.peachapi.driver.peachdb.gen.Public;
import com.example.peachapi.driver.peachdb.gen.tables.records.DeleteCategoryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DeleteCategory extends TableImpl<DeleteCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.delete_category</code>
     */
    public static final DeleteCategory DELETE_CATEGORY = new DeleteCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeleteCategoryRecord> getRecordType() {
        return DeleteCategoryRecord.class;
    }

    /**
     * The column <code>public.delete_category.category_id</code>.
     */
    public final TableField<DeleteCategoryRecord, UUID> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.delete_category.deleted_at</code>.
     */
    public final TableField<DeleteCategoryRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.delete_category.deleted_by</code>.
     */
    public final TableField<DeleteCategoryRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private DeleteCategory(Name alias, Table<DeleteCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private DeleteCategory(Name alias, Table<DeleteCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.delete_category</code> table reference
     */
    public DeleteCategory(String alias) {
        this(DSL.name(alias), DELETE_CATEGORY);
    }

    /**
     * Create an aliased <code>public.delete_category</code> table reference
     */
    public DeleteCategory(Name alias) {
        this(alias, DELETE_CATEGORY);
    }

    /**
     * Create a <code>public.delete_category</code> table reference
     */
    public DeleteCategory() {
        this(DSL.name("delete_category"), null);
    }

    public <O extends Record> DeleteCategory(Table<O> child, ForeignKey<O, DeleteCategoryRecord> key) {
        super(child, key, DELETE_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<DeleteCategoryRecord> getPrimaryKey() {
        return Keys.DELETE_CATEGORY_PKEY;
    }

    @Override
    public List<UniqueKey<DeleteCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<DeleteCategoryRecord>>asList(Keys.DELETE_CATEGORY_PKEY);
    }

    @Override
    public List<ForeignKey<DeleteCategoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DeleteCategoryRecord, ?>>asList(Keys.DELETE_CATEGORY__DELETE_CATEGORY_CATEGORY_ID_FKEY);
    }

    public Categories categories() {
        return new Categories(this, Keys.DELETE_CATEGORY__DELETE_CATEGORY_CATEGORY_ID_FKEY);
    }

    @Override
    public DeleteCategory as(String alias) {
        return new DeleteCategory(DSL.name(alias), this);
    }

    @Override
    public DeleteCategory as(Name alias) {
        return new DeleteCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DeleteCategory rename(String name) {
        return new DeleteCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DeleteCategory rename(Name name) {
        return new DeleteCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, LocalDateTime, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
