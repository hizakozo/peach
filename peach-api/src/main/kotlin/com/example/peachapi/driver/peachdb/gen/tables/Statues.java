/*
 * This file is generated by jOOQ.
 */
package com.example.peachapi.driver.peachdb.gen.tables;


import com.example.peachapi.driver.peachdb.gen.Keys;
import com.example.peachapi.driver.peachdb.gen.Public;
import com.example.peachapi.driver.peachdb.gen.tables.records.StatuesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Statues extends TableImpl<StatuesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.statues</code>
     */
    public static final Statues STATUES = new Statues();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatuesRecord> getRecordType() {
        return StatuesRecord.class;
    }

    /**
     * The column <code>public.statues.status_id</code>.
     */
    public final TableField<StatuesRecord, UUID> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.statues.category_id</code>.
     */
    public final TableField<StatuesRecord, UUID> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.statues.status_name</code>.
     */
    public final TableField<StatuesRecord, String> STATUS_NAME = createField(DSL.name("status_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.statues.status_color</code>.
     */
    public final TableField<StatuesRecord, String> STATUS_COLOR = createField(DSL.name("status_color"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.field("'#FFFFFF'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.statues.created_at</code>.
     */
    public final TableField<StatuesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.statues.created_by</code>.
     */
    public final TableField<StatuesRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.statues.changed_at</code>.
     */
    public final TableField<StatuesRecord, LocalDateTime> CHANGED_AT = createField(DSL.name("changed_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.statues.changed_by</code>.
     */
    public final TableField<StatuesRecord, String> CHANGED_BY = createField(DSL.name("changed_by"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.statues.deleted_by</code>.
     */
    public final TableField<StatuesRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.statues.deleted_at</code>.
     */
    public final TableField<StatuesRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private Statues(Name alias, Table<StatuesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Statues(Name alias, Table<StatuesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.statues</code> table reference
     */
    public Statues(String alias) {
        this(DSL.name(alias), STATUES);
    }

    /**
     * Create an aliased <code>public.statues</code> table reference
     */
    public Statues(Name alias) {
        this(alias, STATUES);
    }

    /**
     * Create a <code>public.statues</code> table reference
     */
    public Statues() {
        this(DSL.name("statues"), null);
    }

    public <O extends Record> Statues(Table<O> child, ForeignKey<O, StatuesRecord> key) {
        super(child, key, STATUES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<StatuesRecord> getPrimaryKey() {
        return Keys.STATUES_PKEY;
    }

    @Override
    public List<UniqueKey<StatuesRecord>> getKeys() {
        return Arrays.<UniqueKey<StatuesRecord>>asList(Keys.STATUES_PKEY);
    }

    @Override
    public List<ForeignKey<StatuesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StatuesRecord, ?>>asList(Keys.STATUES__STATUES_CATEGORY_ID_FKEY);
    }

    public Categories categories() {
        return new Categories(this, Keys.STATUES__STATUES_CATEGORY_ID_FKEY);
    }

    @Override
    public Statues as(String alias) {
        return new Statues(DSL.name(alias), this);
    }

    @Override
    public Statues as(Name alias) {
        return new Statues(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Statues rename(String name) {
        return new Statues(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Statues rename(Name name) {
        return new Statues(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, UUID, String, String, LocalDateTime, String, LocalDateTime, String, String, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
