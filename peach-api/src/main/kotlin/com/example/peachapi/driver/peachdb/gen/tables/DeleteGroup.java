/*
 * This file is generated by jOOQ.
 */
package com.example.peachapi.driver.peachdb.gen.tables;


import com.example.peachapi.driver.peachdb.gen.Keys;
import com.example.peachapi.driver.peachdb.gen.Public;
import com.example.peachapi.driver.peachdb.gen.tables.records.DeleteGroupRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DeleteGroup extends TableImpl<DeleteGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.delete_group</code>
     */
    public static final DeleteGroup DELETE_GROUP = new DeleteGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeleteGroupRecord> getRecordType() {
        return DeleteGroupRecord.class;
    }

    /**
     * The column <code>public.delete_group.group_id</code>.
     */
    public final TableField<DeleteGroupRecord, UUID> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.delete_group.deleted_at</code>.
     */
    public final TableField<DeleteGroupRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.delete_group.deleted_by</code>.
     */
    public final TableField<DeleteGroupRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.VARCHAR)), this, "");

    private DeleteGroup(Name alias, Table<DeleteGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private DeleteGroup(Name alias, Table<DeleteGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.delete_group</code> table reference
     */
    public DeleteGroup(String alias) {
        this(DSL.name(alias), DELETE_GROUP);
    }

    /**
     * Create an aliased <code>public.delete_group</code> table reference
     */
    public DeleteGroup(Name alias) {
        this(alias, DELETE_GROUP);
    }

    /**
     * Create a <code>public.delete_group</code> table reference
     */
    public DeleteGroup() {
        this(DSL.name("delete_group"), null);
    }

    public <O extends Record> DeleteGroup(Table<O> child, ForeignKey<O, DeleteGroupRecord> key) {
        super(child, key, DELETE_GROUP);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<DeleteGroupRecord> getPrimaryKey() {
        return Keys.DELETE_GROUP_PKEY;
    }

    @Override
    public List<UniqueKey<DeleteGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<DeleteGroupRecord>>asList(Keys.DELETE_GROUP_PKEY);
    }

    @Override
    public List<ForeignKey<DeleteGroupRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DeleteGroupRecord, ?>>asList(Keys.DELETE_GROUP__DELETE_GROUP_GROUP_ID_FKEY);
    }

    public Groups groups() {
        return new Groups(this, Keys.DELETE_GROUP__DELETE_GROUP_GROUP_ID_FKEY);
    }

    @Override
    public DeleteGroup as(String alias) {
        return new DeleteGroup(DSL.name(alias), this);
    }

    @Override
    public DeleteGroup as(Name alias) {
        return new DeleteGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DeleteGroup rename(String name) {
        return new DeleteGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DeleteGroup rename(Name name) {
        return new DeleteGroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, LocalDateTime, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
